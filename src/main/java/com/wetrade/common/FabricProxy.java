/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.wetrade.common;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.concurrent.TimeoutException;
import java.util.function.Consumer;

import com.wetrade.utils.Timer;

import org.hyperledger.fabric.gateway.Contract;
import org.hyperledger.fabric.gateway.ContractEvent;
import org.hyperledger.fabric.gateway.ContractException;
import org.hyperledger.fabric.gateway.Gateway;
import org.hyperledger.fabric.gateway.Network;
import org.hyperledger.fabric.gateway.Wallet;
import org.hyperledger.fabric.gateway.Wallet.Identity;
import org.hyperledger.fabric.sdk.BlockEvent;
import org.json.JSONObject;

public class FabricProxy {

    private FabricProxyConfig proxyConfig;

    private Wallet wallet;

    private HashMap<String, Gateway> gatewayMap = new HashMap<String, Gateway>();


    public FabricProxy(FabricProxyConfig proxyConfig) throws FabricProxyException {
        this.proxyConfig = proxyConfig;

        try {
            this.wallet = Wallet.createFileSystemWallet(proxyConfig.getWalletPath());
        } catch (IOException exception) {
            throw new FabricProxyException(exception.getMessage());
        }

    }

    private Identity getIdentity(String user) throws FabricProxyException {
        Identity identity;
        try {
            identity = this.wallet.get(user);
        } catch (IOException exception) {
            throw new FabricProxyException(exception.getMessage());
        }

        if (identity == null) {
            throw new FabricProxyException("Could not find identity '"+user+"'");
        }
        return identity;
    }

    private Gateway setupGateway(String user) throws FabricProxyException {
        Identity identity = this.getIdentity(user);
        String keyHash = new String(identity.getPrivateKey().getEncoded(), StandardCharsets.UTF_8) + "_" + this.proxyConfig.getChannelName();
        if (!this.gatewayMap.containsKey(keyHash)) {
            System.out.println("Create new gateway");
            Gateway gateway;
            try {
                Gateway.Builder builder = Gateway.createBuilder()
                            .identity(this.wallet, user)
                            .networkConfig(proxyConfig.getConnectionProfilePath())
                            .discovery(false);
                gateway = builder.connect();
            } catch (IOException exception) {
                throw new FabricProxyException(exception.getMessage());
            }
            this.gatewayMap.put(keyHash, gateway);
            return gateway;

        } else {
            System.out.println("Get existing gateway");
            return this.gatewayMap.get(keyHash);
        }
    }

    public String evaluateTransaction(String user, String subContractName, String functionName, String... args) throws FabricProxyException {
        Gateway gateway = this.setupGateway(user);
        Network network = gateway.getNetwork(this.proxyConfig.getChannelName());
        Contract contract = network.getContract(this.proxyConfig.getContractName(), subContractName);

        byte[] result;
        try {
            Timer timer = new Timer();
            timer.tic();
            result = contract.evaluateTransaction(functionName, args);
            System.out.println("[" + subContractName + "." + functionName + "] took " + timer.toc() + "s");
        } catch (ContractException exception) {
            throw new FabricProxyException(exception.getMessage());
        }
        return new String(result, StandardCharsets.UTF_8);
    }

    public String evaluateTransaction(String user, String subContractName, String functionName) throws FabricProxyException {
        Gateway gateway = this.setupGateway(user);
        Network network = gateway.getNetwork(this.proxyConfig.getChannelName());
        Contract contract = network.getContract(this.proxyConfig.getContractName(), subContractName);

        byte[] result;
        try {
            Timer timer = new Timer();
            timer.tic();
            result = contract.evaluateTransaction(functionName);
            System.out.println("[" + subContractName + "." + functionName + "] took " + timer.toc() + "s");
        } catch (ContractException exception) {
            throw new FabricProxyException(exception.getMessage());
        }
        return new String(result, StandardCharsets.UTF_8);
    }

    public String submitTransaction(String user, String subContractName, String functionName, String... args) throws FabricProxyException {
        Gateway gateway = this.setupGateway(user);
        Network network = gateway.getNetwork(this.proxyConfig.getChannelName());
        Contract contract = network.getContract(this.proxyConfig.getContractName(), subContractName);

        byte[] result;
        try {
            Timer timer = new Timer();
            timer.tic();
            result = contract.submitTransaction(functionName, args);
            System.out.println("[" + subContractName + "." + functionName + "] took " + timer.toc() + "s");
        } catch (ContractException | TimeoutException | InterruptedException exception) {
            throw new FabricProxyException(exception.getMessage());
        }
        return new String(result, StandardCharsets.UTF_8);
    }

    public String submitTransaction(String user, String subContractName, String functionName) throws FabricProxyException {
        Gateway gateway = this.setupGateway(user);
        Network network = gateway.getNetwork(this.proxyConfig.getChannelName());
        Contract contract = network.getContract(this.proxyConfig.getContractName(), subContractName);

        byte[] result;
        try {
            Timer timer = new Timer();
            timer.tic();
            result = contract.submitTransaction(functionName, new String[]{});
            System.out.println("[" + subContractName + "." + functionName + "] took " + timer.toc() + "s");
        } catch (ContractException | TimeoutException | InterruptedException exception) {
            throw new FabricProxyException(exception.getMessage());
        }
        return new String(result, StandardCharsets.UTF_8);
    }

    public Consumer<ContractEvent> addContractListener(String user, String subContractName, String eventName, Consumer<ContractEvent> contractListener) throws IOException, FabricProxyException  {
        Gateway gateway = this.setupGateway(user);
        Network network = gateway.getNetwork(this.proxyConfig.getChannelName());
        Contract contract = network.getContract(this.proxyConfig.getContractName(), subContractName);

        return contract.addContractListener(contractListener);
    }

    public void removeContractListener(String user, String subContractName, Consumer<ContractEvent> listener) throws IOException, FabricProxyException  {
        Gateway gateway = this.setupGateway(user);
        Network network = gateway.getNetwork(this.proxyConfig.getChannelName());
        Contract contract = network.getContract(this.proxyConfig.getContractName(), subContractName);

        contract.removeContractListener(listener);
    }

    public Consumer<BlockEvent> addBlockListener(String user, Consumer<BlockEvent> blockListener) throws IOException, FabricProxyException  {
        Gateway gateway = this.setupGateway(user);
        Network network = gateway.getNetwork(this.proxyConfig.getChannelName());

        return network.addBlockListener(blockListener);
    }

    public Consumer<BlockEvent> addBlockListener(String user, Consumer<BlockEvent> blockListener, Long startBlock) throws IOException, FabricProxyException  {
        Gateway gateway = this.setupGateway(user);
        Network network = gateway.getNetwork(this.proxyConfig.getChannelName());

        return network.addBlockListener(startBlock, blockListener);
    }

    public void removeBlockListener(String user, Consumer<BlockEvent> listener) throws IOException, FabricProxyException  {
        Gateway gateway = this.setupGateway(user);
        Network network = gateway.getNetwork(this.proxyConfig.getChannelName());

        network.removeBlockListener(listener);
    }

    public JSONObject getMetadata(String user, String subContractName) throws IOException, ContractException, FabricProxyException {
        String METADATA_FUNC = "org.hyperledger.fabric:GetMetadata";
        String metadataString = this.evaluateTransaction(user, subContractName, METADATA_FUNC);
        return new JSONObject(metadataString);
    }
}
